
<%- include('../layouts/user/header.ejs') %>
		<!-- Start Hero Section -->
			<div class="borderNav">
				<div class="container">
					<div class="row justify-content-between">
						<div class="col-lg-5">
							<div class="intro-excerpt">
								<h3>Checkout</h3>
							</div>
						</div>
						<div class="col-lg-7">
							
						</div>
					</div>
				</div>
			</div>
		<!-- End Hero Section -->
  <!-- Cancel Order Modal -->
  <%- include('../partials/breadcrumbs.ejs')  %>
  <div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <label for="cancelReason" class="form-label">Reason for Cancellation:</label>
          <select id="cancelReason" class="form-control">
            <option value="Changed mind">Changed mind</option>
            <option value="Found better price">Found a better price</option>
            <option value="Order mistake">Ordered by mistake</option>
            <option value="Other">Other</option>
          </select>
          <input type="text" id="cancelReasonOther" class="form-control mt-2" placeholder="Please specify if 'Other'" style="display:none;">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="confirmCancelOrder()">Confirm Cancel</button>
        </div>
      </div>
    </div>
  </div>
<form action="" id="checkoutForm">
		<div class="untree_co-section">
		    <div class="container">
		      <div class="row">
		        <div class="col-md-6 mb-5 mb-md-0">
		          <h2 class="h3 mb-3 text-black">Billing Details</h2>
		          <div class="p-3 p-lg-5 border bg-white">
					<div class="form-group row">
						<% address.forEach((addr, i) => { %>
						  <div class="card m-3 address-card" style="width: 18rem;" id="address-<%= i %>">
							<div class="card-body select-address" data-index="<%= i %>">
							  <h6 class="card-subtitle mb-2 text-muted"><%= addr.fullname %></h6>
							  <h6 class="card-subtitle mb-2 text-muted"><%= addr.mobile %></h6>
							  <h6 class="card-subtitle mb-2 text-muted"><%= addr.street %></h6>
							  <h6 class="card-subtitle mb-2 text-muted"><%= addr.city %></h6>
							  <h6 class="card-subtitle mb-2 text-muted"><%= addr.state %></h6>
							  <h6 class="card-subtitle mb-2 text-muted"><%= addr.country %></h6>
							  <h6 class="card-subtitle mb-2 text-muted"><%= addr.pincode %></h6>
							  <button type="button" class="btn btn-primary select-button" onclick="selectAddress('<%= addr._id %>', <%= i %>)">Select</button>
							</div>
						  </div>
						<% }) %>
					  </div>

		            <div class="form-group">
		              <label for="c_ship_different_address" class="text-black" data-bs-toggle="collapse" href="#ship_different_address" role="button" aria-expanded="false" aria-controls="ship_different_address"><input type="checkbox" value="1" id="c_ship_different_address"> Ship To A Different Address?</label>
		              <div class="collapse" id="ship_different_address">
		                <div class="py-2">

							<div class="form-group">
								<label for="c_country" class="text-black">Full name <span class="text-danger">*</span></label>
								<input type="text" class="form-control" id="fullname" name="fullname">
							  </div>
							  <div class="form-group">
								  <label for="c_country" class="text-black">Mobile <span class="text-danger">*</span></label>
								  <input type="text" class="form-control" id="mobile" name="mobile">
							  </div>
		  
							  <div class="form-group row">
								<div class="col-md-12">
								  <label for="c_address" class="text-black">Street <span class="text-danger">*</span></label>
								  <input type="text" class="form-control" id="street" name="street" placeholder="Street address">
								</div>
							  </div>
		  
							  <div class="form-group mt-3">
								<input type="text" class="form-control" placeholder="Apartment, suite, unit etc. (optional)">
							  </div>
		  
							  <div class="form-group row">
								<div class="col-md-6">
								  <label for="c_state_country" class="text-black">Pincode <span class="text-danger">*</span></label>
								  <input type="text" class="form-control" id="pincode" name="pincode">
								</div>
								<div class="col-md-6">
								  <label for="c_postal_zip" class="text-black">City<span class="text-danger">*</span></label>
								  <input type="text" class="form-control" id="city" name="city">
								</div>
							  </div>
		  
							  <div class="form-group row mb-5">
								<div class="col-md-6">
								  <label for="c_email_address" class="text-black">State <span class="text-danger">*</span></label>
								  <input type="text" class="form-control" id="state" name="state">
								</div>
								<div class="col-md-6">
								  <label for="c_phone" class="text-black">Country <span class="text-danger">*</span></label>
								  <input type="text" class="form-control" id="country" name="country" >
								</div>
							  </div>
							  <input type="submit" value="Add">
		  
		                  
		                </div>

		              </div>
		            </div>

		          </div>
		        </div>
		        <div class="col-md-6">

					<div class="row mb-5">
						<div class="col-md-12">
						  <h2 class="h3 mb-3 text-black">Coupon Code</h2>
						  <div class="p-3 p-lg-5 border bg-white">
							<label for="c_code" class="text-black mb-3">Enter your coupon code if you have one</label>
							<div class="input-group w-75 couponcode-wrap">
							  <input type="text" class="form-control me-2" id="couponCode" placeholder="Coupon Code" aria-label="Coupon Code" aria-describedby="button-addon2">
							  <div class="input-group-append">
								<button class="btn btn-black btn-sm" type="button" id="couponButton">Apply</button>
							  </div>
							</div>
						  </div>
						</div>
					  </div>

		          <div class="row mb-5">
		            <div class="col-md-12">
		              <h2 class="h3 mb-3 text-black">Your Order</h2>
		              <div class="p-3 p-lg-5 border bg-white">
		                <table class="table site-block-order-table mb-5">
		                  <thead>
		                    <th>Product</th>
		                    <th>Total</th>
		                  </thead>
		                  <tbody>
		                    <tr>
								
								<% product.forEach(product=>{ %>
		                      <td name="productName"><%= product.name  %> <strong class="mx-2">x</strong> <%= product.quantity %></td>
		                      <td><i class="bi bi-currency-rupee"></i><%= product.price*product.quantity  %></td>
							  <input type="hidden" name="productIds" value="<%=product._id  %>">
							  <input type="hidden" name=" productStock" id="productStock" value="<%= product.stock %>">
		                    </tr>
							<% }) %>
		                    <tr>
								
								<tr>
									<td class="text-black font-weight-bold"><strong>Cart Subtotal</strong></td>
									<td class="text-black"><i class="bi bi-currency-rupee"></i><%= total %></td>
								  </tr>
								  <tr id="couponDiscountRow" style="display:none;">
									<td class="text-black font-weight-bold"><strong>Coupon Discount</strong></td>
									<td class="text-black" id="couponDiscountAmount"></td>
									
								  </tr>
								  <tr id="shippingChargeRow" style="display:none;">
									<td class="text-black font-weight-bold"><strong>Shipping Charge</strong></td>
									<td class="text-black" id="shippingChargeAmount"></td>
								</tr>
								  <tr>
									<td class="text-black font-weight-bold"><strong>Order Total</strong></td>
									<td class="text-black font-weight-bold"><strong><i class="bi bi-currency-rupee"></i><span id="orderTotal"><%= total %></span></strong></td>
								  </tr>
								  <input type="hidden" id="finalTotal" name="finalTotal" value="<%= total %>">
		                  </tbody>
		                </table>
							<div class="form-group m-5">
							  <label for="payment-method">Choose payment method:</label>
							  <select name="payment" id="payment" class="form-control">
								<option value="Razorpay">Razorpay</option>
								<option value="COD">Cash-On-Delivery</option>
								<option value="Wallet"><i class="bi bi-wallet2"></i>Wallet</option>
							  </select>
							</div>
						  
							<div class="form-group m-5">
							  <button type="button" class="btn btn-black btn-lg py-3 btn-block" onclick="placeOrder()">Place Order</button>
							  <button type="button" class="btn btn-black btn-lg py-3 btn-block" onclick="cancelOrder()">Cancel Order</button>
							</div>
					
		              </div>
		            </div>
		          </div>

		        </div>
		      </div>
		      <!-- </form> -->
		    </div>
		  </div>
		</form>
		<!-- Start Footer Section -->
		<div class="row g-5 mb-5">
			<div class="col-lg-4">
				<div class="mb-4 footer-logo-wrap"><a href="#" class="footer-logo">Trend Setter<span>.</span></a></div>
				<p class="mb-4">Donec facilisis quam ut purus rutrum lobortis. Donec vitae odio quis nisl dapibus malesuada. Nullam ac aliquet velit. Aliquam vulputate velit imperdiet dolor tempor tristique. Pellentesque habitant</p>
  
				<ul class="list-unstyled custom-social">
					<li><a href="#"><span class="fa fa-brands fa-facebook-f"></span></a></li>
					<li><a href="#"><span class="fa fa-brands fa-twitter"></span></a></li>
					<li><a href="#"><span class="fa fa-brands fa-instagram"></span></a></li>
					<li><a href="#"><span class="fa fa-brands fa-linkedin"></span></a></li>
				</ul>
			</div>
  
			<div class="col-lg-8">
				<div class="row links-wrap">
					<div class="col-6 col-sm-6 col-md-3">
						<ul class="list-unstyled">
							<li><a href="#">About us</a></li>
							<li><a href="#">Services</a></li>
							<li><a href="#">Blog</a></li>
							<li><a href="#">Contact us</a></li>
						</ul>
					</div>
  
					<div class="col-6 col-sm-6 col-md-3">
						<ul class="list-unstyled">
							<li><a href="#">Support</a></li>
							<li><a href="#">Knowledge base</a></li>
							<li><a href="#">Live chat</a></li>
						</ul>
					</div>
  
					<div class="col-6 col-sm-6 col-md-3">
						<ul class="list-unstyled">
							<li><a href="#">Jobs</a></li>
							<li><a href="#">Our team</a></li>
							<li><a href="#">Leadership</a></li>
							<li><a href="#">Privacy Policy</a></li>
						</ul>
					</div>
  
					<div class="col-6 col-sm-6 col-md-3">
						<ul class="list-unstyled">
							<li><a href="#">Nordic Chair</a></li>
							<li><a href="#">Kruzo Aero</a></li>
							<li><a href="#">Ergonomic Chair</a></li>
						</ul>
					</div>
				</div>
			</div>
  
		</div>
  
		<div class="border-top copyright">
			<div class="row pt-4">
				<div class="col-lg-6">
					<p class="mb-2 text-center text-lg-start">Copyright &copy;<script>document.write(new Date().getFullYear());</script>. All Rights Reserved. &mdash; Designed with love by <a href="https://untree.co">Untree.co</a> Distributed By <a hreff="https://themewagon.com">ThemeWagon</a>  <!-- License information: https://untree.co/license/ -->
	</p>
				</div>
  
				<div class="col-lg-6 text-center text-lg-end">
					<ul class="list-unstyled d-inline-flex ms-auto">
						<li class="me-4"><a href="#">Terms &amp; Conditions</a></li>
						<li><a href="#">Privacy Policy</a></li>
					</ul>
				</div>
  
			</div>
		</div>
  
	</div>
  </footer>
  <!-- End Footer Section -->	
  <script src ="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.0/sweetalert.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
		<script>
			let selectedAddressId = null;

				function selectAddress(addressId, index) {
				document.querySelectorAll('.address-card').forEach((card, idx) => {
					if (idx !== index) {
					card.remove();
					} else {
					card.classList.add('selected-address');
					card.querySelector('.select-button').textContent = 'Selected';
					card.querySelector('.select-button').disabled = true;
					}
				});

				selectedAddressId = addressId;
				fetchShippingCharge(addressId);
				}
				async function fetchShippingCharge(addressId){
					try{
						const response = await fetch(`/shippingCharge?addressId=${addressId}`);
						if(!response.ok){
							throw new Error('Failed to fetch shipping charge');
						}
						const data = await response.json();
						const shippingcharge = parseFloat(data.shippingCharge); //shipping charge
						console.log(shippingcharge,'shipping charge');
						let total = parseFloat($('#finalTotal').val()); // current total
						console.log(total,'current total');
						if (isNaN(total)) {
							console.error('Current total amount is not a number');
							swal("Error", "Invalid current total amount.", "error");
							return;
						}
						if (isNaN(shippingcharge)) {
							console.error('Discount amount is not a number');
							swal("Error", "Invalid discount amount received.", "error");
							return;
						}
						const newTotal = Math.max(total + shippingcharge,0);

						//update current values
						$('#orderTotal').text(newTotal.toFixed(2));
						$('#finalTotal').val(newTotal.toFixed(2));
						//discount row show
						$('#shippingChargeRow').show();
						$('#shippingChargeAmount').html(`<i class="bi bi-currency-rupee"></i>${shippingcharge.toFixed(2)}`);
						swal("Shipping Charge Added", `shipping chare${shippingcharge.toFixed(2)} added`, "success");


					}catch(error){
						console.error('Error fetching shipping charge:',error.message);
						swal("Error", "An error occurred while adding shipping charge. Please try again later.", "error");
					}
				}


/*// Ensure form submission checks the final total
$('#orderForm').submit(function (event) {
  const finalTotal = parseFloat($('#finalTotal').val());

  if (isNaN(finalTotal) || finalTotal <= 0) {
    event.preventDefault();
    swal("Error", "Invalid order total. Please check the order details and try again.", "error");
  }
});*/
	
				

function placeOrder() {
    const paymentMethod = document.getElementById('payment').value;
	const shippingChargeElement = document.getElementById('shippingChargeAmount');
  

  const shippingCharge = shippingChargeElement ? parseFloat(shippingChargeElement.innerText) : 0;
    if (!selectedAddressId) {
        swal("Please select an address", {
            dangerMode: true,
            buttons: true,
        });
        return;
    }

    if (!paymentMethod) {
        swal("Please select a payment method", {
            dangerMode: true,
            buttons: true,
        });
        return;
    }

    const finalTotal = parseFloat(document.getElementById('finalTotal').value);;
    const productName = Array.from(document.getElementsByName('productName')).map(input => input.innerText.trim());

    fetch('/checkout', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            addressId: selectedAddressId,
            paymentMethod: paymentMethod,
            totalAmount: finalTotal,
            productName: productName,
			shippingCharge:shippingCharge,
			
        })
    })
    .then(response => response.json())
    .then(res => {
        if (res.success) {
            if (paymentMethod === 'COD') {
                handleOrderSuccess("Your order has been successfully placed.", "/orders");
            } else if (paymentMethod === 'Razorpay') {
                const options = {
                    key: `${res.key_id}`,
                    amount: `${res.amount}`,
                    currency: "INR",
                    name: `${res.product_name}`,
                    order_id: `${res.order_id}`,
                    handler: function(response) {
						handleRazorpaySuccess(response,res.db_order_id);
                    },
                    prefill: {
                        name: `${res.name}`,
                        email: `${res.email}`,
                        contact: `${res.contact}`
                    },
                    notes: {
                        address: `${res.product_name}`
                    },
                    theme: {
                        color: '#3399cc'
                    }
                };

                const razorpayObject = new Razorpay(options);
                razorpayObject.on('payment.failed',function(response){
					handleRazorpayFailure(response.error,res.db_order_id);
				});

                razorpayObject.open();
            }else if(paymentMethod === 'Wallet'){
				handleOrderSuccess("Your order has been successfully placed.", "/orders");
			}
        } else {
            swal("Error placing order", res.message || "An error occurred while processing your order. Please try again later.", "error", {
                dangerMode: true,
                button: true,
            });
        }
    })
    .catch(error => {
        console.error('Error placing order:', error);
        swal("Error placing order", "An error occurred while processing your order. Please try again later.", "error", {
            dangerMode: true,
            button: true,
        });
    });
}
function handleRazorpaySuccess(response,orderId) {
    // Handle successful payment response from Razorpay
    swal("Order Placed!", "Your order has been successfully placed.", "success", {
        button: "Go to Orders",
    }).then((value) => {
        if (value) {
            window.location.href = '/orders';
        }
    });

    // Send payment success status to backend
    sendPaymentStatusToBackend(response.razorpay_payment_id, true , orderId);
}

function handleRazorpayFailure(error,orderId) {
    // Handle payment failure from Razorpay
    swal("Payment Failed", error.description || "Your payment was not successful. Please try again.", "error", {
        button: "try again",
    }).then((value)=>{
		if(value){
			window.location.href = '/orders'
		}
	})

    // Send payment failure status to backend
    sendPaymentStatusToBackend(null, false,orderId);
}
function handleOrderSuccess(message, redirectUrl) {
    swal("Order Placed!", message, "success", {
        button: "Go to Orders",
    }).then((value) => {
        if (value) {
            window.location.href = '/orders';
        }
    });
}
function sendPaymentStatusToBackend(paymentId, success,orderId) {
	console.log(orderId,'order id')
    fetch('/process-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            paymentId: paymentId,
            success: success,
			orderId:orderId
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (!data.success) {
            swal("Error", "Failed to send payment status to backend.", "error");
        }else{
			console.log('Payment status updated successfully');
		}
    })
    .catch(error => {
        console.error('Error sending payment status:', error);
        swal("Error", "An error occurred while sending payment status to backend.", "error");
    });
}

				
				document.getElementById('cancelReason').addEventListener('change', function() {
						if (this.value === 'Other') {
						document.getElementById('cancelReasonOther').style.display = 'block';
						} else {
						document.getElementById('cancelReasonOther').style.display = 'none';
						}
					});

					function cancelOrder() {
						var cancelOrderModal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
						cancelOrderModal.show();
					}

					function confirmCancelOrder() {
						const reasonSelect = document.getElementById('cancelReason');
						let cancelReason = reasonSelect.value;

						if (cancelReason === 'Other') {
						const otherReason = document.getElementById('cancelReasonOther').value.trim();
						if (otherReason) {
							cancelReason = otherReason;
						} else {
							swal("please specify your reason", {
							dangerMode: true,
							buttons: true,
							}    );
							return;
						}
						}

						fetch(`/cancelOrder`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({
							reason: cancelReason
						})
						})
						.then(response => response.json())
						.then(data => {
						if (data.success) {
							swal("Order cancelled!", "Your order cancelled successfully.", "success", {
									button: "Go to Orders",
									}).then((value)=>{
										if(value){
											window.location.href = '/orders';
										}
									})
						} else {
							alert('Error cancelling order: ' + data.message);
						}
						})
						.catch(error => {
						console.error('Error:', error);
						swal("Error", "An error occurred while cancelling the order.", "error");
						});
					};
//coupon validation
$('#couponButton').click(function() {
  const couponCode = $('#couponCode').val().trim();

  fetch('/validateCoupon', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ couponCode: couponCode })
  })
  .then(response => response.json())
  .then(data => {
    if (data.valid) {
      const discountedAmount = parseFloat(data.discountAmount); // Ensure this is a number
      let total = parseFloat($('#finalTotal').val()); // Get the current total amount from the hidden input field

      if (isNaN(total)) {
        console.error('Current total amount is not a number');
        swal("Error", "Invalid current total amount.", "error");
        return;
      }

      if (isNaN(discountedAmount)) {
        console.error('Discount amount is not a number');
        swal("Error", "Invalid discount amount received.", "error");
        return;
      }

      const newTotal = Math.max(total - discountedAmount, 0); // Ensure the new total is not negative

      // Update the order total
      $('#orderTotal').text(newTotal.toFixed(2));
      $('#finalTotal').val(newTotal.toFixed(2)); // Update the hidden input field

      // Show the coupon discount row and update its amount
      $('#couponDiscountRow').show();
      $('#couponDiscountAmount').html(`<i class="bi bi-currency-rupee"></i>${discountedAmount.toFixed(2)}`);
      
      // Disable the coupon input and button after successful application
      $('#couponCode').prop('disabled', true);
      $('#couponButton').prop('disabled', true);
      
      swal("Coupon Applied", "Discount applied successfully!", "success");
    } else {
      swal("Invalid Coupon", "The coupon code entered is not valid.", "error");
    }
  })
  .catch(error => {
    console.error('Error applying coupon:', error);
    swal("Error", "An error occurred while applying the coupon. Please try again later.", "error");
  });
});

$('#orderForm').submit(function(event) {
  const finalTotal = parseFloat($('#finalTotal').val());

  if (isNaN(finalTotal) || finalTotal <= 0) {
    event.preventDefault();
    swal("Error", "Invalid order total. Please check the order details and try again.", "error");
  }
});


					
		</script>

<script src="js/bootstrap.bundle.min.js"></script>
<script src="js/tiny-slider.js"></script>
<script src="js/custom.js"></script>

</body>


</html>